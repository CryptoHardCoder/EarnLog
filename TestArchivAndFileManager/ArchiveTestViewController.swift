////
////  ArchiveTestManager.swift
////  JobData
////
////  –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ CarEntry
////
//
//import UIKit
//import Foundation
//
//// MARK: - Test Data Generator
///// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
//struct TestDataGenerator {
//    
//    static let testCars = [
//        ("BMW X5", 45000.0, true),
//        ("Mercedes C200", 38000.0, false),
//        ("Audi A4", 35000.0, true),
//        ("Toyota Camry", 25000.0, true),
//        ("Honda Civic", 22000.0, false),
//        ("Volkswagen Golf", 20000.0, true),
//        ("Ford Focus", 18000.0, false),
//        ("Mazda CX-5", 28000.0, true),
//        ("Hyundai Elantra", 19000.0, true),
//        ("Kia Rio", 16000.0, false),
//        ("Nissan Qashqai", 27000.0, true),
//        ("Skoda Octavia", 24000.0, false),
//        ("Renault Duster", 21000.0, true),
//        ("Chevrolet Cruze", 20000.0, true),
//        ("Peugeot 308", 23000.0, false)
//    ]
//    
//    static func generateCarEntries(count: Int, for date: Date) -> [IncomeEntry] {
//        let calendar = Calendar.current
//        var entries: [IncomeEntry] = []
//        
//        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
//        let range = calendar.range(of: .day, in: .month, for: date) ?? 1..<32
//        let maxDay = min(range.upperBound - 1, calendar.component(.day, from: date))
//        
//        for i in 0..<count {
//            let testCar = testCars[i % testCars.count]
//            
//            // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–µ—Å—è—Ü–∞
//            let randomDay = Int.random(in: 1...maxDay)
//            let randomHour = Int.random(in: 9...18)
//            let randomMinute = Int.random(in: 0...59)
//            
//            var dateComponents = calendar.dateComponents([.year, .month], from: date)
//            dateComponents.day = randomDay
//            dateComponents.hour = randomHour
//            dateComponents.minute = randomMinute
//            
//            let itemDate = calendar.date(from: dateComponents) ?? date
//            
//            // –í–∞—Ä–∏–∞—Ü–∏—è —Ü–µ–Ω—ã ¬±5000
//            let priceVariation = Double.random(in: -5000...5000)
//            let finalPrice = max(testCar.1 + priceVariation, 10000.0)
//            
//            let carEntry = IncomeEntry(
//                date: itemDate,
//                car: "\(testCar.0) #\(i+1)",
//                price: finalPrice,
//                isPaid: Bool.random(),
//                source: AppFileManager.shared.sources.randomElement() ?? .mainJob
//            )
//            
//            entries.append(carEntry)
//        }
//        
//        return entries
//    }
//}
//
//// MARK: - Archive Test Extension
//extension ArchiveManager {
//    
//    // MARK: - Data Creation Methods
//    
//    /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
//    func createTestData(count: Int = 10) {
//        print("üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ \(count) —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
//        
//        let newEntries = TestDataGenerator.generateCarEntries(count: count, for: Date())
//        appFileManager.allItems.append(contentsOf: newEntries)
//        appFileManager.saveItemsToJSONFile()
//        
//        print("‚úÖ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–æ \(count) –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
//        printDataDistribution()
//        notifyDataUpdate()
//    }
//    
//    /// –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü –≤ –ø—Ä–æ—à–ª–æ–º
//    func createTestDataForMonth(count: Int, monthsBack: Int) {
//        guard let targetDate = Calendar.current.date(byAdding: .month, value: -monthsBack, to: Date()) else {
//            print("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è \(monthsBack) –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥")
//            return
//        }
//        
//        print("üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ \(count) –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞ \(monthsBack) –º–µ—Å—è—Ü(–µ–≤) –Ω–∞–∑–∞–¥")
//        
//        let newEntries = TestDataGenerator.generateCarEntries(count: count, for: targetDate)
//        appFileManager.allItems.append(contentsOf: newEntries)
//        appFileManager.saveItemsToJSONFile()
//        
//        print("‚úÖ –¢–ï–°–¢: –î–æ–±–∞–≤–ª–µ–Ω–æ \(count) –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞ —Ü–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü")
//        notifyDataUpdate()
//    }
//    
//    // MARK: - Archive Control Methods
//    
//    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//    func forceArchiveForTesting(year: Int? = nil, month: Int? = nil) {
//        let calendar = Calendar.current
//        let now = Date()
//        
//        let archiveYear = year ?? calendar.component(.year, from: now)
//        let archiveMonth = month ?? calendar.component(.month, from: now)
//        
//        print("üß™ –¢–ï–°–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞ \(archiveMonth).\(archiveYear)")
//        print("üß™ –¢–ï–°–¢: –î–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: \(appFileManager.allItems.count)")
//        
//        guard !appFileManager.allItems.isEmpty else {
//            print("‚ö†Ô∏è –¢–ï–°–¢: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏! –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞")
//            return
//        }
//        
//        ArchiveManager.shared.archiveCurrentDataToCSV(for: archiveYear, month: archiveMonth)
//    }
//    
//    /// –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–º–µ–Ω—É –º–µ—Å—è—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
//    func simulateMonthChange(monthsBack: Int = 1) {
//        let calendar = Calendar.current
//        let now = Date()
//        
//        guard let pastDate = calendar.date(byAdding: .month, value: -monthsBack, to: now) else {
//            print("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–π –¥–∞—Ç—ã")
//            return
//        }
//        
//        print("üß™ –¢–ï–°–¢: –°–∏–º—É–ª—è—Ü–∏—è —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞ –Ω–∞ \(monthsBack) –º–µ—Å—è—Ü(–µ–≤) –Ω–∞–∑–∞–¥")
//        saveLastKnownDate(pastDate)
//        print("‚úÖ –¢–ï–°–¢: –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ checkArchiveOnAppStart() –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏—è")
//    }
//    
//    // MARK: - Debug Methods
//    
//    /// –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏–≤–∞—Ö
//    func debugArchiveFiles() {
//        print("\nüìä === –û–¢–õ–ê–î–ö–ê –ê–†–•–ò–í–û–í ===")
//        
//        debugArchiveFolder()
//        debugArchiveMetadata()
//        debugCurrentData()
//        
//        print("üìä === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===\n")
//    }
//    
//    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞
//    func debugCSVContent(fileName: String) {
//        let csvFileURL = csvArchivesFolderURL.appendingPathComponent(fileName)
//        
//        do {
//            let content = try String(contentsOf: csvFileURL, encoding: .utf8)
//            print("\nüìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï: \(fileName)")
//            print(String(repeating: "=", count: 50))
//            print(content)
//            print(String(repeating: "=", count: 50))
//        } catch {
//            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ \(fileName): \(error)")
//        }
//    }
//    
//    /// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//    func clearAllTestData() {
//        print("üßπ –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
//        
//        let fileManager = FileManager.default
//        let filesToRemove = [
//            csvArchivesFolderURL,
//            archiveMetadataFileURL,
//            lastKnownDateFileURL
//        ]
//        
//        for fileURL in filesToRemove {
//            if fileManager.fileExists(atPath: fileURL.path) {
//                do {
//                    try fileManager.removeItem(at: fileURL)
//                    print("‚úÖ –£–¥–∞–ª–µ–Ω: \(fileURL.lastPathComponent)")
//                } catch {
//                    print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è \(fileURL.lastPathComponent): \(error)")
//                }
//            }
//        }
//        
//        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
//        appFileManager.allItems.removeAll()
//        appFileManager.saveItemsToJSONFile()
//        
//        print("‚úÖ –û–ß–ò–°–¢–ö–ê: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
//        notifyDataUpdate()
//    }
//    
//    // MARK: - Private Helper Methods
//    
//    private func saveLastKnownDate(_ date: Date) {
//        let calendar = Calendar.current
//        let dateComponents = DateComponents(
//            year: calendar.component(.year, from: date),
//            month: calendar.component(.month, from: date),
//            day: calendar.component(.day, from: date)
//        )
//        
//        do {
//            let data = try JSONEncoder().encode(dateComponents)
//            try data.write(to: lastKnownDateFileURL)
//        } catch {
//            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç—ã: \(error)")
//        }
//    }
//    
//    private func printDataDistribution() {
//        let calendar = Calendar.current
//        var monthlyDistribution: [String: Int] = [:]
//        
//        for item in appFileManager.allItems {
//            let month = calendar.component(.month, from: item.date)
//            let year = calendar.component(.year, from: item.date)
//            let monthKey = "\(month).\(year)"
//            monthlyDistribution[monthKey, default: 0] += 1
//        }
//        
//        print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º:")
//        for (key, count) in monthlyDistribution.sorted(by: { $0.key > $1.key }) {
//            print("   \(key): \(count) –∑–∞–ø–∏—Å–µ–π")
//        }
//    }
//    
//    private func debugArchiveFolder() {
//        let fileManager = FileManager.default
//        
//        print("üìÅ –ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤: \(csvArchivesFolderURL.path)")
//        print("üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: \(fileManager.fileExists(atPath: csvArchivesFolderURL.path))")
//        
//        do {
//            let files = try fileManager.contentsOfDirectory(
//                at: csvArchivesFolderURL,
//                includingPropertiesForKeys: [.creationDateKey, .fileSizeKey]
//            )
//            
//            print("üìÑ –§–∞–π–ª–æ–≤: \(files.count)")
//            
//            for file in files {
//                let attributes = try fileManager.attributesOfItem(atPath: file.path)
//                let size = attributes[.size] as? Int ?? 0
//                let creationDate = attributes[.creationDate] as? Date ?? Date()
//                
//                print("  ‚Ä¢ \(file.lastPathComponent)")
//                print("    –†–∞–∑–º–µ—Ä: \(FileFormatter.formatFileSize(size))")
//                print("    –°–æ–∑–¥–∞–Ω: \(FileFormatter.formatDate(creationDate))")
//                
//                showCSVPreview(at: file)
//            }
//        } catch {
//            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: \(error)")
//        }
//    }
//    
//    private func debugArchiveMetadata() {
//        let metadata = loadArchiveMetadata()
//        print("\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–æ–≤: \(metadata.count)")
//        
//        for meta in metadata {
//            print("  ‚Ä¢ \(meta.monthDisplayName(Locale(identifier: "locale".localized))): \(meta.itemsCount) –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
//            print("    –§–∞–π–ª: \(meta.fileName)")
//            print("    –°–æ–∑–¥–∞–Ω: \(FileFormatter.formatDate(meta.createdAt))")
//        }
//    }
//    
//    private func debugCurrentData() {
//        print("\nüìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: \(appFileManager.allItems.count)")
//        
//        if !appFileManager.allItems.isEmpty {
//            let totalPrice = appFileManager.allItems.reduce(0) { $0 + $1.price }
//            let paidCount = appFileManager.allItems.filter { $0.isPaid }.count
//            print("    üí∞ –û–±—â–∞—è —Å—É–º–º–∞: \(FileFormatter.formatPrice(totalPrice))")
//            print("    ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: \(paidCount)/\(appFileManager.allItems.count)")
//        }
//    }
//    
//    private func showCSVPreview(at fileURL: URL) {
//        do {
//            let content = try String(contentsOf: fileURL, encoding: .utf8)
//            let lines = content.components(separatedBy: .newlines)
//            
//            print("    üìÑ –ü—Ä–µ–≤—å—é (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):")
//            for (index, line) in lines.prefix(3).enumerated() {
//                print("       \(index + 1): \(line)")
//            }
//            print("    üìè –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: \(lines.count)")
//        } catch {
//            print("    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: \(error)")
//        }
//    }
//    
//    private func notifyDataUpdate() {
//        NotificationCenter.default.post(name: .dataDidUpdate, object: nil)
//    }
//}
//
//// MARK: - File Formatters
//struct FileFormatter {
//    
//    static func formatFileSize(_ bytes: Int) -> String {
//        let formatter = ByteCountFormatter()
//        formatter.allowedUnits = [.useKB, .useMB]
//        formatter.countStyle = .file
//        return formatter.string(fromByteCount: Int64(bytes))
//    }
//    
//    static func formatDate(_ date: Date) -> String {
//        let formatter = DateFormatter()
//        formatter.dateFormat = "dd.MM.yyyy HH:mm"
//        return formatter.string(from: date)
//    }
//    
//    static func formatPrice(_ price: Double) -> String {
//        let formatter = NumberFormatter()
//        formatter.numberStyle = .currency
//        formatter.currencyCode = "USD"
//        formatter.maximumFractionDigits = 0
//        return formatter.string(from: NSNumber(value: price)) ?? "\(Int(price))"
//    }
//}
//
//// MARK: - Automated Test Runner
//class AutomatedArchiveTest {
//    
//    private let archiveManager = ArchiveManager.shared
//    /// –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
//    static func runFullTestScenario() {
//        print("\nü§ñ === –ü–û–õ–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ ===")
//        
//        // –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
//        print("\nüßπ –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞")
//        ArchiveManager.shared.clearAllTestData()
//        
//        // –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
//        print("\nüìä –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
//        ArchiveManager.shared.createTestDataForMonth(count: 5, monthsBack: 2)
//        ArchiveManager.shared.createTestDataForMonth(count: 8, monthsBack: 1)
//        ArchiveManager.shared.createTestData(count: 6)
//        
//        // –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
//        print("\nüì¶ –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
//        
//        // –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞ 2 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
//        ArchiveManager.shared.simulateMonthChange(monthsBack: 2)
//        ArchiveManager.shared.checkArchiveOnAppStart()
//        
//        // –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
//        ArchiveManager.shared.simulateMonthChange(monthsBack: 1)
//        ArchiveManager.shared.checkArchiveOnAppStart()
//        
//        // –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
//        ArchiveManager.shared.simulateMonthChange(monthsBack: 0)
//        
//        // –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
//        print("\nüîç –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
//        ArchiveManager.shared.debugArchiveFiles()
//        
//        validateTestResults()
//        
//        print("\n‚úÖ === –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
//    }
//    
//    /// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
//    static func runQuickTest() {
//        print("\n‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ ===")
//        
//        let archiveManager = ArchiveManager.shared
//        
//        archiveManager.createTestData(count: 3)
//        print("üìä –°–æ–∑–¥–∞–Ω–æ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
//        
//        ArchiveManager.shared.forceArchiveForTesting()
//        print("üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è")
//        
//        ArchiveManager.shared.debugArchiveFiles()
//        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
//    }
//    
//    /// –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤
//    static func runLoadingTest() {
//        print("\nüì• === –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ê–†–•–ò–í–û–í ===")
//        
//        let archiveManager = ArchiveManager.shared
//        let availableMonths = archiveManager.getAvailableMonths()
//        
//        guard !availableMonths.isEmpty else {
//            print("‚ö†Ô∏è –ù–µ—Ç –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏")
//            return
//        }
//        
//        for month in availableMonths {
//            let items = archiveManager.getItemsForMonthPDF(year: month.year, month: month.month)
//            print("üìÖ \(month.displayName): –∑–∞–≥—Ä—É–∂–µ–Ω–æ \(items.count) –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
//            
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//            let totalPrice = items.reduce(0) { $0 + $1.price }
//            let paidCount = items.filter { $0.isPaid }.count
//            print("   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: \(FileFormatter.formatPrice(totalPrice))")
//            print("   ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: \(paidCount)/\(items.count)")
//        }
//        
//        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
//    }
//    
//    private static func validateTestResults() {
//        let archiveManager = ArchiveManager.shared
//        let availableMonths = archiveManager.getAvailableMonths()
//        
//        print("\nüìã –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
//        print("üìÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—è—Ü–µ–≤: \(availableMonths.count)")
//        
//        for month in availableMonths {
//            let items = archiveManager.getItemsForMonthPDF(year: month.year, month: month.month)
//            print("   ‚Ä¢ \(month.displayName): \(items.count) –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
//        }
//        
//        print("üìä –¢–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏: \(AppFileManager.shared.allItems.count)")
//        
//        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤—ã —Å–æ–∑–¥–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
//        let archiveInfo = archiveManager.getArchiveInfo()
//        let expectedArchives = max(0, availableMonths.count - 1) // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç—Å—è
//        
//        if archiveInfo.count >= expectedArchives {
//            print("‚úÖ –ê—Ä—Ö–∏–≤—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
//        } else {
//            print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–æ–≤ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
//        }
//    }
//}
//
//
//
//// MARK: - Test Button Configuration
//struct TestButtonConfig {
//    let title: String
//    let action: Selector
//    let style: ButtonStyle
//    
//    enum ButtonStyle {
//        case primary
//        case secondary
//        case danger
//        
//        var backgroundColor: UIColor {
//            switch self {
//            case .primary: return .systemBlue
//            case .secondary: return .systemGreen
//            case .danger: return .systemRed
//            }
//        }
//    }
//}
//
//// MARK: - Test Section Configuration
//struct TestSection {
//    let title: String
//    let buttons: [TestButtonConfig]
//}
//
//// MARK: - Archive Test View Controller
//class ArchiveTestViewController: UIViewController {
//    
//    // MARK: - UI Elements
//    private var scrollView: UIScrollView!
//    private var stackView: UIStackView!
//    
//    // MARK: - Test Sections Configuration
//    private lazy var testSections: [TestSection] = [
//        TestSection(
//            title: "üìä –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–•",
//            buttons: [
//                TestButtonConfig(title: "–°–æ–∑–¥–∞—Ç—å 5 –∞–≤—Ç–æ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)", action: #selector(createSmallTestData), style: .primary),
//                TestButtonConfig(title: "–°–æ–∑–¥–∞—Ç—å 15 –∞–≤—Ç–æ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)", action: #selector(createLargeTestData), style: .primary),
//                TestButtonConfig(title: "–î–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", action: #selector(createPastMonthData), style: .secondary),
//                TestButtonConfig(title: "–î–∞–Ω–Ω—ã–µ –∑–∞ 2 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥", action: #selector(createTwoMonthsData), style: .secondary)
//            ]
//        ),
//        TestSection(
//            title: "üóìÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ï–ú",
//            buttons: [
//                TestButtonConfig(title: "–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É –º–µ—Å—è—Ü–∞ (1)", action: #selector(simulateOneMonth), style: .primary),
//                TestButtonConfig(title: "–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É –º–µ—Å—è—Ü–∞ (2)", action: #selector(simulateTwoMonths), style: .primary),
//                TestButtonConfig(title: "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É", action: #selector(resetDate), style: .secondary)
//            ]
//        ),
//        TestSection(
//            title: "üì¶ –ê–†–•–ò–í–ê–¶–ò–Ø",
//            buttons: [
//                TestButtonConfig(title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏—é", action: #selector(checkArchive), style: .primary),
//                TestButtonConfig(title: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è", action: #selector(forceArchive), style: .primary),
//                TestButtonConfig(title: "–ê—Ä—Ö–∏–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", action: #selector(archivePastMonth), style: .secondary)
//            ]
//        ),
//        TestSection(
//            title: "üîç –û–¢–õ–ê–î–ö–ê",
//            buttons: [
//                TestButtonConfig(title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏–≤–∞—Ö", action: #selector(debugArchives), style: .secondary),
//                TestButtonConfig(title: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã", action: #selector(showAvailableMonths), style: .secondary),
//                TestButtonConfig(title: "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", action: #selector(showCurrentData), style: .secondary),
//                TestButtonConfig(title: "–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ CSV", action: #selector(testCSVLoading), style: .secondary)
//            ]
//        ),
//        TestSection(
//            title: "ü§ñ –ê–í–¢–û–¢–ï–°–¢–´",
//            buttons: [
//                TestButtonConfig(title: "–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ—Ç–µ—Å—Ç", action: #selector(runFullAutomatedTest), style: .primary),
//                TestButtonConfig(title: "–ë—ã—Å—Ç—Ä—ã–π –∞–≤—Ç–æ—Ç–µ—Å—Ç", action: #selector(runQuickAutomatedTest), style: .secondary),
//                TestButtonConfig(title: "–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏", action: #selector(runLoadingTest), style: .secondary)
//            ]
//        ),
//        TestSection(
//            title: "üßπ –û–ß–ò–°–¢–ö–ê",
//            buttons: [
//                TestButtonConfig(title: "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", action: #selector(clearCurrentData), style: .danger),
//                TestButtonConfig(title: "–£–î–ê–õ–ò–¢–¨ –í–°–ï", action: #selector(clearAllData), style: .danger)
//            ]
//        )
//    ]
//    
//    // MARK: - Lifecycle
//    
//    override func viewDidLoad() {
//        super.viewDidLoad()
//        setupViewController()
//        setupUI()
//    }
//    
//    // MARK: - Setup Methods
//    
//    private func setupViewController() {
//        title = "üöó –¢–µ—Å—Ç CSV –ê—Ä—Ö–∏–≤–∞—Ü–∏–∏"
//        view.backgroundColor = .systemBackground
//        
//        navigationItem.rightBarButtonItem = UIBarButtonItem(
//            title: "–ó–∞–∫—Ä—ã—Ç—å",
//            style: .done,
//            target: self,
//            action: #selector(closeTapped)
//        )
//    }
//    
//    private func setupUI() {
//        setupScrollView()
//        setupStackView()
//        createSections()
//        setupConstraints()
//    }
//    
//    private func setupScrollView() {
//        scrollView = UIScrollView()
//        scrollView.translatesAutoresizingMaskIntoConstraints = false
//        scrollView.showsVerticalScrollIndicator = true
//        view.addSubview(scrollView)
//    }
//    
//    private func setupStackView() {
//        stackView = UIStackView()
//        stackView.axis = .vertical
//        stackView.spacing = 16
//        stackView.translatesAutoresizingMaskIntoConstraints = false
//        scrollView.addSubview(stackView)
//    }
//    
//    private func createSections() {
//        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
//        let titleLabel = createTitleLabel()
//        stackView.addArrangedSubview(titleLabel)
//        
//        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
//        let separator = createSeparator()
//        stackView.addArrangedSubview(separator)
//        
//        // –°–µ–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
//        for section in testSections {
//            createSection(section)
//        }
//    }
//    
//    private func createTitleLabel() -> UILabel {
//        let label = UILabel()
//        label.text = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
//        label.font = .boldSystemFont(ofSize: 20)
//        label.textAlignment = .center
//        label.numberOfLines = 0
//        return label
//    }
//    
//    private func createSeparator() -> UIView {
//        let separator = UIView()
//        separator.backgroundColor = .systemGray4
//        separator.heightAnchor.constraint(equalToConstant: 1).isActive = true
//        return separator
//    }
//    
//    private func createSection(_ section: TestSection) {
//        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
//        let sectionLabel = UILabel()
//        sectionLabel.text = section.title
//        sectionLabel.font = .boldSystemFont(ofSize: 16)
//        sectionLabel.textColor = .systemBlue
//        stackView.addArrangedSubview(sectionLabel)
//        
//        // –ö–Ω–æ–ø–∫–∏ —Å–µ–∫—Ü–∏–∏
//        for buttonConfig in section.buttons {
//            let button = createButton(from: buttonConfig)
//            stackView.addArrangedSubview(button)
//        }
//        
//        // –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏
//        let spacer = UIView()
//        spacer.heightAnchor.constraint(equalToConstant: 8).isActive = true
//        stackView.addArrangedSubview(spacer)
//    }
//    
//    private func createButton(from config: TestButtonConfig) -> UIButton {
//        let button = UIButton(type: .system)
//        button.setTitle(config.title, for: .normal)
//        button.backgroundColor = config.style.backgroundColor
//        button.setTitleColor(.white, for: .normal)
//        button.layer.cornerRadius = 8
//        button.titleLabel?.font = .systemFont(ofSize: 15, weight: .medium)
////        button.contentEdgeInsets = UIEdgeInsets(top: 12, left: 16, bottom: 12, right: 16)
//        button.addTarget(self, action: config.action, for: .touchUpInside)
//        
//        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
//        button.addTarget(self, action: #selector(buttonTouchDown(_:)), for: .touchDown)
//        button.addTarget(self, action: #selector(buttonTouchUp(_:)), for: [.touchUpInside, .touchUpOutside, .touchCancel])
//        
//        return button
//    }
//    
//    private func setupConstraints() {
//        NSLayoutConstraint.activate([
//            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
//            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
//            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
//            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
//            
//            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 20),
//            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 20),
//            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -20),
//            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: -20),
//            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, constant: -40)
//        ])
//    }
//    
//    // MARK: - Button Actions - Data Creation
//    
//    @objc private func createSmallTestData() {
//        ArchiveManager.shared.createTestData(count: 5)
//        showSuccessAlert(message: "–°–æ–∑–¥–∞–Ω–æ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
//    }
//    
//    @objc private func createLargeTestData() {
//        ArchiveManager.shared.createTestData(count: 15)
//        showSuccessAlert(message: "–°–æ–∑–¥–∞–Ω–æ 15 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
//    }
//    
//    @objc private func createPastMonthData() {
//        ArchiveManager.shared.createTestDataForMonth(count: 8, monthsBack: 1)
//        showSuccessAlert(message: "–°–æ–∑–¥–∞–Ω–æ 8 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")
//    }
//    
//    @objc private func createTwoMonthsData() {
//        ArchiveManager.shared.createTestDataForMonth(count: 6, monthsBack: 2)
//        showSuccessAlert(message: "–°–æ–∑–¥–∞–Ω–æ 6 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞ 2 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥")
//    }
//    
//    // MARK: - Button Actions - Time Management
//    
//    @objc private func simulateOneMonth() {
//        ArchiveManager.shared.simulateMonthChange(monthsBack: 1)
//        showSuccessAlert(message: "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 1 –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥")
//    }
//    
//    @objc private func simulateTwoMonths() {
//        ArchiveManager.shared.simulateMonthChange(monthsBack: 2)
//        showSuccessAlert(message: "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥")
//    }
//    
//    @objc private func resetDate() {
//        ArchiveManager.shared.simulateMonthChange(monthsBack: 0)
//        showSuccessAlert(message: "–î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é")
//    }
//    
//    // MARK: - Button Actions - Archive Operations
//    
//    @objc private func checkArchive() {
//        ArchiveManager.shared.checkArchiveOnAppStart()
//        showInfoAlert(title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", message: "–ê–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.\n–î–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ Xcode.")
//    }
//    
//    @objc private func forceArchive() {
//        ArchiveManager.shared.forceArchiveForTesting()
//        showSuccessAlert(message: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
//    }
//    
//    @objc private func archivePastMonth() {
//        let calendar = Calendar.current
//        let now = Date()
//        guard let pastMonth = calendar.date(byAdding: .month, value: -1, to: now) else {
//            showErrorAlert(message: "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞")
//            return
//        }
//        
//        let month = calendar.component(.month, from: pastMonth)
//        let year = calendar.component(.year, from: pastMonth)
//        
//        ArchiveManager.shared.forceArchiveForTesting(year: year, month: month)
//        showSuccessAlert(message: "–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
//    }
//    
//    // MARK: - Button Actions - Debug Operations
//    
//    @objc private func debugArchives() {
//        ArchiveManager.shared.debugArchiveFiles()
//        showInfoAlert(title: "–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏–≤–∞—Ö –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å Xcode.")
//    }
//    
//    @objc private func showAvailableMonths() {
//        let months = ArchiveManager.shared.getAvailableMonths()
//        
//        if months.isEmpty {
//            showInfoAlert(title: "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã", message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
//            return
//        }
//        
//        var message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏:\n\n"
//        for month in months {
//            let items = ArchiveManager.shared.getItemsForMonthPDF(year: month.year, month: month.month)
//            message += "‚Ä¢ \(month.displayName): \(items.count) –∞–≤—Ç–æ\n"
//        }
//        
//        showInfoAlert(title: "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã", message: message)
//    }
//    
//    @objc private func showCurrentData() {
//        let items = AppFileManager.shared.allItems
//        
//        if items.isEmpty {
//            showInfoAlert(title: "üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏")
//            return
//        }
//        
//        let totalPrice = items.reduce(0) { $0 + $1.price }
//        let paidCount = items.filter { $0.isPaid }.count
//        
//        let message = """
//        –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: \(items.count)
//        –û–±—â–∞—è —Å—É–º–º–∞: \(FileFormatter.formatPrice(totalPrice))
//        –û–ø–ª–∞—á–µ–Ω–æ: \(paidCount)/\(items.count)
//        –ù–µ–æ–ø–ª–∞—á–µ–Ω–æ: \(items.count - paidCount)
//        """
//        
//        showInfoAlert(title: "üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", message: message)
//    }
//    
//    @objc private func testCSVLoading() {
//        let archives = ArchiveManager.shared.getArchiveInfo()
//        
//        if archives.isEmpty {
//            showInfoAlert(title: "‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏", message: "–ù–µ—Ç –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞—Ä—Ö–∏–≤.")
//            return
//        }
//        
//        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–æ–≤
//        print("üß™ –¢–ï–°–¢: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤")
//        
//        var successCount = 0
//        var totalItems = 0
//        
//        for _ in archives {
//            let availableMonths = ArchiveManager.shared.getAvailableMonths()
//            for month in availableMonths {
//                let items = ArchiveManager.shared.getItemsForMonthPDF(year: month.year, month: month.month)
//                if !items.isEmpty {
//                    successCount += 1
//                    totalItems += items.count
//                    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∞—Ä—Ö–∏–≤ \(month.displayName): \(items.count) –∑–∞–ø–∏—Å–µ–π")
//                }
//            }
//        }
//        
//        let message = """
//        –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:
//        
//        –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: \(successCount) –∞—Ä—Ö–∏–≤–æ–≤
//        –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: \(totalItems)
//        
//        –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ Xcode.
//        """
//        
//        showSuccessAlert(message: message)
//    }
//    
//    // MARK: - Button Actions - Automated Tests
//    
//    @objc private func runFullAutomatedTest() {
//        showLoadingAlert(title: "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç", message: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç...\n–ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
//        
//        DispatchQueue.global(qos: .background).async {
//            AutomatedArchiveTest.runFullTestScenario()
//            
//            DispatchQueue.main.async {
//                self.dismissAlert()
//                self.showSuccessAlert(message: "–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Xcode –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
//            }
//        }
//    }
//    
//    @objc private func runQuickAutomatedTest() {
//        showLoadingAlert(title: "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", message: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç...")
//        
//        DispatchQueue.global(qos: .background).async {
//            AutomatedArchiveTest.runQuickTest()
//            
//            DispatchQueue.main.async {
//                self.dismissAlert()
//                self.showSuccessAlert(message: "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ Xcode.")
//            }
//        }
//    }
//    
//    @objc private func runLoadingTest() {
//        showLoadingAlert(title: "üì• –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏", message: "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞—Ä—Ö–∏–≤–æ–≤...")
//        
//        DispatchQueue.global(qos: .background).async {
//            AutomatedArchiveTest.runLoadingTest()
//            
//            DispatchQueue.main.async {
//                self.dismissAlert()
//                self.showSuccessAlert(message: "–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ Xcode.")
//            }
//        }
//    }
//    
//    // MARK: - Button Actions - Cleanup
//    
//    @objc private func clearCurrentData() {
//        let alert = UIAlertController(
//            title: "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
//            message: "–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏?\n\n(–ê—Ä—Ö–∏–≤—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏)",
//            preferredStyle: .alert
//        )
//        
//        alert.addAction(UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive) { _ in
//            AppFileManager.shared.allItems.removeAll()
//            AppFileManager.shared.saveItemsToJSONFile()
//            NotificationCenter.default.post(name: .dataDidUpdate, object: nil)
//            self.showSuccessAlert(message: "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
//        })
//        
//        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
//        present(alert, animated: true)
//    }
//    
//    @objc private func clearAllData() {
//        let alert = UIAlertController(
//            title: "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï",
//            message: "–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –≤—Å–µ –∞—Ä—Ö–∏–≤—ã?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n‚ö†Ô∏è –í—Å–µ CSV –∞—Ä—Ö–∏–≤—ã –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!",
//            preferredStyle: .alert
//        )
//        
//        alert.addAction(UIAlertAction(title: "–£–î–ê–õ–ò–¢–¨ –í–°–ï", style: .destructive) { _ in
//            ArchiveManager.shared.clearAllTestData()
//            self.showSuccessAlert(message: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞—Ä—Ö–∏–≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã")
//        })
//        
//        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
//        present(alert, animated: true)
//    }
//    
//    // MARK: - Navigation Actions
//    
//    @objc private func closeTapped() {
//        dismiss(animated: true)
//    }
//    
//    // MARK: - Button Animation
//    
//    @objc private func buttonTouchDown(_ sender: UIButton) {
//        UIView.animate(withDuration: 0.1, delay: 0, options: .allowUserInteraction) {
//            sender.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
//            sender.alpha = 0.8
//        }
//    }
//    
//    @objc private func buttonTouchUp(_ sender: UIButton) {
//        UIView.animate(withDuration: 0.1, delay: 0, options: .allowUserInteraction) {
//            sender.transform = .identity
//            sender.alpha = 1.0
//        }
//    }
//    
//    // MARK: - Alert Helpers
//    
//    private var currentAlert: UIAlertController?
//    
//    private func showSuccessAlert(message: String) {
//        showAlert(title: "‚úÖ –£—Å–ø–µ—à–Ω–æ", message: message, style: .alert)
//    }
//    
//    private func showInfoAlert(title: String, message: String) {
//        showAlert(title: title, message: message, style: .alert)
//    }
//    
//    private func showErrorAlert(message: String) {
//        showAlert(title: "‚ùå –û—à–∏–±–∫–∞", message: message, style: .alert)
//    }
//    
//    private func showLoadingAlert(title: String, message: String) {
//        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
//        
//        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
//        let loadingIndicator = UIActivityIndicatorView(style: .medium)
//        loadingIndicator.translatesAutoresizingMaskIntoConstraints = false
//        loadingIndicator.startAnimating()
//        
//        alert.setValue(loadingIndicator, forKey: "accessoryView")
//        
//        currentAlert = alert
//        present(alert, animated: true)
//    }
//    
//    private func dismissAlert() {
//        currentAlert?.dismiss(animated: true)
//        currentAlert = nil
//    }
//    
//    private func showAlert(title: String, message: String, style: UIAlertController.Style) {
//        let alert = UIAlertController(title: title, message: message, preferredStyle: style)
//        alert.addAction(UIAlertAction(title: "OK", style: .default))
//        present(alert, animated: true)
//    }
//}
//
//// MARK: - Extensions for Easy Access
//extension UIViewController {
//    
//    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
//    func showArchiveTestController() {
//        let testController = ArchiveTestViewController()
//        let navController = UINavigationController(rootViewController: testController)
//        navController.modalPresentationStyle = .formSheet
//        
//        if let sheet = navController.sheetPresentationController {
//            sheet.detents = [.large()]
//            sheet.prefersGrabberVisible = true
//        }
//        
//        present(navController, animated: true)
//    }
//    
//    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
//    func runAutomatedArchiveTest() {
//        let alert = UIAlertController(
//            title: "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
//            message: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:",
//            preferredStyle: .actionSheet
//        )
//        
//        alert.addAction(UIAlertAction(title: "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", style: .default) { _ in
//            self.executeAutomatedTest(type: .full)
//        })
//        
//        alert.addAction(UIAlertAction(title: "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", style: .default) { _ in
//            self.executeAutomatedTest(type: .quick)
//        })
//        
//        alert.addAction(UIAlertAction(title: "–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏", style: .default) { _ in
//            self.executeAutomatedTest(type: .loading)
//        })
//        
//        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
//        
//        // –î–ª—è iPad
//        if let popover = alert.popoverPresentationController {
//            popover.sourceView = view
//            popover.sourceRect = CGRect(x: view.bounds.midX, y: view.bounds.midY, width: 0, height: 0)
//            popover.permittedArrowDirections = []
//        }
//        
//        present(alert, animated: true)
//    }
//    
//    private enum TestType {
//        case full, quick, loading
//    }
//    
//    private func executeAutomatedTest(type: TestType) {
//        let loadingAlert = UIAlertController(
//            title: "ü§ñ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç",
//            message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
//            preferredStyle: .alert
//        )
//        
//        let indicator = UIActivityIndicatorView(style: .medium)
//        indicator.translatesAutoresizingMaskIntoConstraints = false
//        indicator.startAnimating()
//        loadingAlert.setValue(indicator, forKey: "accessoryView")
//        
//        present(loadingAlert, animated: true)
//        
//        DispatchQueue.global(qos: .background).async {
//            switch type {
//            case .full:
//                AutomatedArchiveTest.runFullTestScenario()
//            case .quick:
//                AutomatedArchiveTest.runQuickTest()
//            case .loading:
//                AutomatedArchiveTest.runLoadingTest()
//            }
//            
//            DispatchQueue.main.async {
//                loadingAlert.dismiss(animated: true) {
//                    let successAlert = UIAlertController(
//                        title: "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
//                        message: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ Xcode.",
//                        preferredStyle: .alert
//                    )
//                    successAlert.addAction(UIAlertAction(title: "OK", style: .default))
//                    self.present(successAlert, animated: true)
//                }
//            }
//        }
//    }
//}
