/*
 //TODO: –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –ø–æ–Ω—è—Ç—å —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —ç—Ç–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º —Å–¥–µ–ª–∞–Ω–æ
 import Foundation
 import UIKit
 
 // MARK: - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Premium —Å—Ç–∞—Ç—É—Å–∞
 extension NSNotification.Name {
 static let premiumStatusChanged = NSNotification.Name("premiumStatusChanged")
 static let archiveError = NSNotification.Name("archiveError")
 static let dataMigrationStarted = NSNotification.Name("dataMigrationStarted")
 static let dataMigrationCompleted = NSNotification.Name("dataMigrationCompleted")
 }
 
 // MARK: - –£–ª—É—á—à–µ–Ω–Ω—ã–π PremiumManager
 final class PremiumManager {
 static let shared = PremiumManager()
 
 private let premiumKey = "isPremium"
 
 private init() {}
 
 var isPremium: Bool {
 UserDefaults.standard.bool(forKey: premiumKey)
 }
 
 /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Premium —Å—Ç–∞—Ç—É—Å–∞
 func setPremiumStatus(_ isActive: Bool) {
 let previousStatus = isPremium
 UserDefaults.standard.set(isActive, forKey: premiumKey)
 
 // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
 if previousStatus != isActive {
 print("üîÑ Premium —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: \(isActive ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")")
 NotificationCenter.default.post(name: .premiumStatusChanged, object: nil)
 }
 }
 
 /// –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç Premium (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
 func activatePremium() {
 setPremiumStatus(true)
 }
 
 /// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç Premium (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
 func deactivatePremium() {
 setPremiumStatus(false)
 }
 
 /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å iCloud
 func isICloudAvailable() -> Bool {
 if let _ = FileManager.default.url(forUbiquityContainerIdentifier: nil) {
 return true
 }
 return false
 }
 }
 
 import Foundation
 import UIKit
 
 class AppFileManager2 {
 
 static let shared = AppFileManager2()
 
 private let jsonFileName = "allItems.json"
 private let myApplicationSupportFilesFolder = "My Application Support Files"
 private let exportedFilesFolderName = "Exported Files"
 
 let fileManager = FileManager.default
 let hiddenFolder = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first!
 
 // MARK: - Computed Property –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–ø–æ–∫
 var userAccessibleFolder: URL {
 if PremiumManager.shared.isPremium && PremiumManager.shared.isICloudAvailable(),
 let iCloudFolder = FileManager.default.url(forUbiquityContainerIdentifier: nil)?
 .appending(path: exportedFilesFolderName) {
 print("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ iCloud")
 return iCloudFolder
 } else {
 let localFolder = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
 print("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
 return localFolder
 }
 }
 
 var myApplicationSupportFilesFolderURL: URL {
 return hiddenFolder.appending(path: myApplicationSupportFilesFolder)
 }
 
 private var exportedFilesFolderURL: URL {
 return userAccessibleFolder.appending(path: exportedFilesFolderName)
 }
 
 private var jsonFileURL: URL {
 return myApplicationSupportFilesFolderURL.appending(path: jsonFileName)
 }
 
 var allItems: [IncomeEntry] = []
 var updatedAllitems = [IncomeEntry]()
 var partTimeWorkItems: [IncomeEntry] = []
 var basicWorkItems: [IncomeEntry] = []
 
 let defaultSources: [IncomeSource] = [.mainJob]
 
 var customSources: [IncomeSource.SideJob] {
 SideJobStorage.shared.loadAllCustomJobs()
 }
 
 var sources: [IncomeSource] {
 return defaultSources + customSources.map { .sideJob($0) }
 }
 
 // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Premium —Å—Ç–∞—Ç—É—Å–∞
 init() {
 setupPremiumStatusObserver()
 }
 
 // MARK: - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Premium —Å—Ç–∞—Ç—É—Å–∞
 private func setupPremiumStatusObserver() {
 NotificationCenter.default.addObserver(
 self,
 selector: #selector(premiumStatusChanged),
 name: .premiumStatusChanged,
 object: nil
 )
 }
 
 // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Premium —Å—Ç–∞—Ç—É—Å–∞
 @objc private func premiumStatusChanged() {
 print("üîÑ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Premium —Å—Ç–∞—Ç—É—Å–∞")
 
 // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
 DispatchQueue.global(qos: .utility).async { [weak self] in
 self?.migrateDataForPremiumChange()
 }
 }
 
 // MARK: - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ Premium —Å—Ç–∞—Ç—É—Å–∞
 private func migrateDataForPremiumChange() {
 print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
 
 // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 DispatchQueue.main.async {
 NotificationCenter.default.post(name: .dataMigrationStarted, object: nil)
 }
 
 do {
 let oldFolderURL: URL
 let newFolderURL: URL
 
 if PremiumManager.shared.isPremium {
 // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤ iCloud
 oldFolderURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
 .appending(path: exportedFilesFolderName)
 newFolderURL = userAccessibleFolder.appending(path: exportedFilesFolderName)
 print("üì§ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ iCloud")
 } else {
 // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑ iCloud –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 if let iCloudURL = FileManager.default.url(forUbiquityContainerIdentifier: nil) {
 oldFolderURL = iCloudURL.appending(path: exportedFilesFolderName)
 newFolderURL = userAccessibleFolder.appending(path: exportedFilesFolderName)
 print("üì• –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ iCloud –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
 } else {
 // –ï—Å–ª–∏ iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
 DispatchQueue.main.async {
 NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
 }
 return
 }
 }
 
 // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏
 guard fileManager.fileExists(atPath: oldFolderURL.path) else {
 print("üìÇ –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
 DispatchQueue.main.async {
 NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
 }
 return
 }
 
 // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
 if !fileManager.fileExists(atPath: newFolderURL.path) {
 try fileManager.createDirectory(at: newFolderURL, withIntermediateDirectories: true)
 }
 
 // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
 let files = try fileManager.contentsOfDirectory(atPath: oldFolderURL.path)
 
 // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
 for fileName in files {
 let oldFileURL = oldFolderURL.appending(path: fileName)
 let newFileURL = newFolderURL.appending(path: fileName)
 
 // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 if fileManager.fileExists(atPath: newFileURL.path) {
 try fileManager.removeItem(at: newFileURL)
 }
 
 // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
 try fileManager.copyItem(at: oldFileURL, to: newFileURL)
 print("üìÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω —Ñ–∞–π–ª: \(fileName)")
 }
 
 print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
 
 } catch {
 print("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
 
 // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
 DispatchQueue.main.async {
 NotificationCenter.default.post(
 name: .archiveError,
 object: nil,
 userInfo: ["error": "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)"]
 )
 }
 }
 
 // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
 DispatchQueue.main.async {
 NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
 }
 }
 
 // MARK: - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
 func archiveCurrentDataToCSV(for year: Int, month: Int) {
 DispatchQueue.global(qos: .utility).async { [weak self] in
 guard let self = self else { return }
 
 print("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –∑–∞ \(month)/\(year)")
 
 // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 self.ensureCSVArchivesFolderExists()
 
 let monthName = self.getMonthName(month)
 let csvFileName = "archive_\(monthName)_\(year).csv"
 let csvFileURL = self.csvArchivesFolderURL.appendingPathComponent(csvFileName)
 
 // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
 let itemsToArchive = self.allItems.filter { item in
 let calendar = Calendar.current
 let itemMonth = calendar.component(.month, from: item.date)
 let itemYear  = calendar.component(.year, from: item.date)
 return month == itemMonth && year == itemYear
 }
 let itemsCount = itemsToArchive.count
 
 print("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º \(itemsCount) –∑–∞–ø–∏—Å–µ–π...")
 
 // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ–Ω–µ
 let csvContent = self.createCSVContent(from: itemsToArchive, monthName: monthName, year: year)
 
 do {
 // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Ñ–∞–π–ª
 try csvContent.write(to: csvFileURL, atomically: true, encoding: .utf8)
 print("üíæ CSV –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ–Ω–µ: \(csvFileName)")
 
 // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞
 let metadata = ArchiveMetadata(
 year: year,
 month: month,
 itemsCount: itemsCount,
 csvFileName: csvFileName,
 createdAt: Date()
 )
 self.saveArchiveMetadata(metadata)
 
 } catch {
 // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 DispatchQueue.main.async {
 print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –∞—Ä—Ö–∏–≤–∞: \(error)")
 
 // –î–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 let errorInfo: [String: Any] = [
 "error": error.localizedDescription,
 "operation": "CSV Archive",
 "year": year,
 "month": month,
 "fileName": csvFileName
 ]
 
 NotificationCenter.default.post(
 name: .archiveError,
 object: nil,
 userInfo: errorInfo
 )
 }
 }
 }
 }
 
 // MARK: - –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 func getAllItems() -> [IncomeEntry] {
 return allItems
 }
 
 private func chekCustomSources(){
 for i in 0..<allItems.count {
 if case let .sideJob(job) = allItems[i].source,
 let sideJob = customSources.first(where: { $0.id == job.id }),
 job != sideJob  {
 allItems[i].source = .sideJob(sideJob)
 }
 }
 }
 
 // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –º–µ—Ç–æ–¥—ã...
 // (addNewItem, deleteItem, updateItem, etc.)
 
 deinit {
 NotificationCenter.default.removeObserver(self)
 }
 }
 
 
 
 // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ ViewController –∏–ª–∏ –¥—Ä—É–≥–æ–º –∫–ª–∞—Å—Å–µ

 class MainViewController: UIViewController {
     
     override func viewDidLoad() {
         super.viewDidLoad()
         setupNotificationObservers()
     }
     
     // MARK: - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     private func setupNotificationObservers() {
         // Premium —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(premiumStatusChanged),
             name: .premiumStatusChanged,
             object: nil
         )
         
         // –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(handleArchiveError(_:)),
             name: .archiveError,
             object: nil
         )
         
         // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª–∞—Å—å
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(dataMigrationStarted),
             name: .dataMigrationStarted,
             object: nil
         )
         
         // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(dataMigrationCompleted),
             name: .dataMigrationCompleted,
             object: nil
         )
     }
     
     // MARK: - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     
     @objc private func premiumStatusChanged() {
         print("üîÑ Premium —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è")
         
         // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
         DispatchQueue.main.async { [weak self] in
             if PremiumManager.shared.isPremium {
                 self?.showPremiumFeatures()
                 self?.showAlert(title: "Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", 
                                message: "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å iCloud")
             } else {
                 self?.hidePremiumFeatures()
                 self?.showAlert(title: "Premium –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", 
                                message: "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
             }
         }
     }
     
     @objc private func handleArchiveError(_ notification: Notification) {
         print("‚ùå –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
         
         // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
         guard let userInfo = notification.userInfo,
               let errorMessage = userInfo["error"] as? String else {
             return
         }
         
         let operation = userInfo["operation"] as? String ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
         let fileName = userInfo["fileName"] as? String ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
         
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É
         DispatchQueue.main.async { [weak self] in
             self?.showAlert(
                 title: "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏",
                 message: """
                 –û–ø–µ—Ä–∞—Ü–∏—è: \(operation)
                 –§–∞–π–ª: \(fileName)
                 –û—à–∏–±–∫–∞: \(errorMessage)
                 
                 –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.
                 """
             )
         }
     }
     
     @objc private func dataMigrationStarted() {
         print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª–∞—Å—å")
         
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
         DispatchQueue.main.async { [weak self] in
             self?.showLoadingIndicator(message: "–ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ...")
             
             // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏
             self?.view.isUserInteractionEnabled = false
         }
     }
     
     @objc private func dataMigrationCompleted() {
         print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
         
         // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
         DispatchQueue.main.async { [weak self] in
             self?.hideLoadingIndicator()
             
             // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI
             self?.view.isUserInteractionEnabled = true
             
             // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ/–∫–æ–ª–ª–µ–∫—Ü–∏–∏
             self?.refreshDataDisplay()
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
             self?.showAlert(
                 title: "–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                 message: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã"
             )
         }
     }
     
     // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è UI
     
     private func showPremiumFeatures() {
         // –ü–æ–∫–∞–∑–∞—Ç—å Premium —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫—É iCloud —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
         print("üéâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Premium —Ñ—É–Ω–∫—Ü–∏–∏")
     }
     
     private func hidePremiumFeatures() {
         // –°–∫—Ä—ã—Ç—å Premium —Ñ—É–Ω–∫—Ü–∏–∏
         print("üì± –°–∫—Ä—ã–≤–∞–µ–º Premium —Ñ—É–Ω–∫—Ü–∏–∏")
     }
     
     private func showLoadingIndicator(message: String) {
         // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
         print("‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: \(message)")
         
         // –ù–∞–ø—Ä–∏–º–µ—Ä:
         // let alert = UIAlertController(title: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ", message: message, preferredStyle: .alert)
         // present(alert, animated: true)
     }
     
     private func hideLoadingIndicator() {
         // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
         print("‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
         
         // –ù–∞–ø—Ä–∏–º–µ—Ä:
         // dismiss(animated: true)
     }
     
     private func refreshDataDisplay() {
         // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
         print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
         
         // –ù–∞–ø—Ä–∏–º–µ—Ä:
         // tableView.reloadData()
         // collectionView.reloadData()
     }
     
     private func showAlert(title: String, message: String) {
         let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
         alert.addAction(UIAlertAction(title: "–û–ö", style: .default))
         present(alert, animated: true)
     }
     
     // MARK: - –û—á–∏—Å—Ç–∫–∞
     deinit {
         NotificationCenter.default.removeObserver(self)
     }
 }

 // MARK: - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 class NotificationManager {
     static let shared = NotificationManager()
     
     private init() {
         setupObservers()
     }
     
     private func setupObservers() {
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(handleArchiveError(_:)),
             name: .archiveError,
             object: nil
         )
         
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(handleMigrationStart),
             name: .dataMigrationStarted,
             object: nil
         )
         
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(handleMigrationComplete),
             name: .dataMigrationCompleted,
             object: nil
         )
     }
     
     @objc private func handleArchiveError(_ notification: Notification) {
         // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
         if let userInfo = notification.userInfo,
            let error = userInfo["error"] as? String {
             print("üìä –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: \(error)")
             
             // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Firebase Analytics, Crashlytics –∏ —Ç.–¥.
             // Analytics.logEvent("archive_error", parameters: userInfo)
         }
     }
     
     @objc private func handleMigrationStart() {
         print("üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏")
         // Analytics.logEvent("data_migration_started")
     }
     
     @objc private func handleMigrationComplete() {
         print("üìä –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
         // Analytics.logEvent("data_migration_completed")
     }
 }
 
 –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç **–ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Premium —Å—Ç–∞—Ç—É—Å–∞**, –¥–∞–∂–µ –µ—Å–ª–∏ iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

 ## –ü—Ä–æ–±–ª–µ–º–∞:
 ```swift
 // –ï—Å–ª–∏ iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
 DispatchQueue.main.async {
     NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
 }
 return
 ```

 –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ **–¥–µ–ª–∞–µ–º –≤–∏–¥**, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–∏–≥—Ä–∏—Ä—É–µ–º. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Premium —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è.

 ## –†–µ—à–µ–Ω–∏–µ - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:–¢–µ–ø–µ—Ä—å **–º–∏–≥—Ä–∞—Ü–∏—è —É–º–Ω–∞—è**! –í–æ—Ç —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:
 // MARK: - –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 enum MigrationState {
     case notNeeded        // –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
     case pending          // –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     case inProgress       // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
     case completed        // –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
     case failedICloudUnavailable // –ù–µ —É–¥–∞–ª–∞—Å—å - iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
     case failedError      // –ù–µ —É–¥–∞–ª–∞—Å—å - –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
 }

 // MARK: - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 class MigrationStateManager {
     static let shared = MigrationStateManager()
     
     private let lastMigrationStatusKey = "lastMigrationStatus"
     private let lastMigrationPremiumStatusKey = "lastMigrationPremiumStatus" 
     
     private init() {}
     
     // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
     func setLastMigrationState(_ state: MigrationState, forPremiumStatus isPremium: Bool) {
         UserDefaults.standard.set(state.rawValue, forKey: lastMigrationStatusKey)
         UserDefaults.standard.set(isPremium, forKey: lastMigrationPremiumStatusKey)
     }
     
     // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
     func getLastMigrationState() -> (state: MigrationState, premiumStatus: Bool) {
         let stateRaw = UserDefaults.standard.string(forKey: lastMigrationStatusKey) ?? ""
         let state = MigrationState(rawValue: stateRaw) ?? .notNeeded
         let premiumStatus = UserDefaults.standard.bool(forKey: lastMigrationPremiumStatusKey)
         
         return (state, premiumStatus)
     }
     
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
     func isMigrationNeeded() -> Bool {
         let currentPremiumStatus = PremiumManager.shared.isPremium
         let (lastState, lastPremiumStatus) = getLastMigrationState()
         
         // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
         if currentPremiumStatus == lastPremiumStatus {
             return false
         }
         
         // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud
         // –∏ –º—ã –≤—Å–µ –µ—â–µ –ø—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium - –ø—Ä–æ–≤–µ—Ä—è–µ–º iCloud —Å–Ω–æ–≤–∞
         if lastState == .failedICloudUnavailable && currentPremiumStatus == true {
             return PremiumManager.shared.isICloudAvailable()
         }
         
         return true
     }
     
     // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
     func resetMigrationState() {
         UserDefaults.standard.removeObject(forKey: lastMigrationStatusKey)
         UserDefaults.standard.removeObject(forKey: lastMigrationPremiumStatusKey)
     }
 }

 extension MigrationState: RawRepresentable {
     typealias RawValue = String
     
     init?(rawValue: String) {
         switch rawValue {
         case "notNeeded": self = .notNeeded
         case "pending": self = .pending
         case "inProgress": self = .inProgress
         case "completed": self = .completed
         case "failedICloudUnavailable": self = .failedICloudUnavailable
         case "failedError": self = .failedError
         default: return nil
         }
     }
     
     var rawValue: String {
         switch self {
         case .notNeeded: return "notNeeded"
         case .pending: return "pending"
         case .inProgress: return "inProgress"
         case .completed: return "completed"
         case .failedICloudUnavailable: return "failedICloudUnavailable"
         case .failedError: return "failedError"
         }
     }
 }

 // MARK: - –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤ AppFileManager
 extension AppFileManager {
     
     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Premium —Å—Ç–∞—Ç—É—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     @objc private func premiumStatusChanged() {
         print("üîÑ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Premium —Å—Ç–∞—Ç—É—Å–∞")
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
         guard MigrationStateManager.shared.isMigrationNeeded() else {
             print("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
             return
         }
         
         // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
         DispatchQueue.global(qos: .utility).async { [weak self] in
             self?.migrateDataForPremiumChange()
         }
     }
     
     // –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
     private func migrateDataForPremiumChange() {
         print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
         
         let currentPremiumStatus = PremiumManager.shared.isPremium
         
         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
         MigrationStateManager.shared.setLastMigrationState(.inProgress, forPremiumStatus: currentPremiumStatus)
         
         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
         DispatchQueue.main.async {
             NotificationCenter.default.post(name: .dataMigrationStarted, object: nil)
         }
         
         // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Premium –∫–æ–≥–¥–∞ iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
         if currentPremiumStatus && !PremiumManager.shared.isICloudAvailable() {
             print("‚ö†Ô∏è Premium –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
             
             // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ—É–¥–∞—á–∏
             MigrationStateManager.shared.setLastMigrationState(.failedICloudUnavailable, forPremiumStatus: currentPremiumStatus)
             
             // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
             DispatchQueue.main.async {
                 let errorInfo: [String: Any] = [
                     "error": "iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ iCloud Drive –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Premium —Ñ—É–Ω–∫—Ü–∏–π.",
                     "operation": "Premium Activation",
                     "canRetry": true
                 ]
                 
                 NotificationCenter.default.post(
                     name: .archiveError,
                     object: nil,
                     userInfo: errorInfo
                 )
                 
                 NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
             }
             return
         }
         
         do {
             let oldFolderURL: URL
             let newFolderURL: URL
             
             if currentPremiumStatus {
                 // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤ iCloud
                 oldFolderURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
                     .appending(path: exportedFilesFolderName)
                 newFolderURL = userAccessibleFolder.appending(path: exportedFilesFolderName)
                 print("üì§ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ iCloud")
             } else {
                 // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑ iCloud –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                 if let iCloudURL = FileManager.default.url(forUbiquityContainerIdentifier: nil) {
                     oldFolderURL = iCloudURL.appending(path: exportedFilesFolderName)
                     newFolderURL = userAccessibleFolder.appending(path: exportedFilesFolderName)
                     print("üì• –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ iCloud –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                 } else {
                     // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                     MigrationStateManager.shared.setLastMigrationState(.completed, forPremiumStatus: currentPremiumStatus)
                     DispatchQueue.main.async {
                         NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
                     }
                     return
                 }
             }
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏
             guard fileManager.fileExists(atPath: oldFolderURL.path) else {
                 print("üìÇ –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–∏–≥—Ä–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π")
                 MigrationStateManager.shared.setLastMigrationState(.completed, forPremiumStatus: currentPremiumStatus)
                 DispatchQueue.main.async {
                     NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
                 }
                 return
             }
             
             // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
             if !fileManager.fileExists(atPath: newFolderURL.path) {
                 try fileManager.createDirectory(at: newFolderURL, withIntermediateDirectories: true)
             }
             
             // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
             let files = try fileManager.contentsOfDirectory(atPath: oldFolderURL.path)
             
             // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
             for fileName in files {
                 let oldFileURL = oldFolderURL.appending(path: fileName)
                 let newFileURL = newFolderURL.appending(path: fileName)
                 
                 // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 if fileManager.fileExists(atPath: newFileURL.path) {
                     try fileManager.removeItem(at: newFileURL)
                 }
                 
                 // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                 try fileManager.copyItem(at: oldFileURL, to: newFileURL)
                 print("üìÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω —Ñ–∞–π–ª: \(fileName)")
             }
             
             // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
             MigrationStateManager.shared.setLastMigrationState(.completed, forPremiumStatus: currentPremiumStatus)
             print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
             
         } catch {
             print("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
             
             // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
             MigrationStateManager.shared.setLastMigrationState(.failedError, forPremiumStatus: currentPremiumStatus)
             
             // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
             DispatchQueue.main.async {
                 let errorInfo: [String: Any] = [
                     "error": "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)",
                     "operation": "Data Migration",
                     "canRetry": true
                 ]
                 
                 NotificationCenter.default.post(
                     name: .archiveError,
                     object: nil,
                     userInfo: errorInfo
                 )
             }
         }
         
         // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
         DispatchQueue.main.async {
             NotificationCenter.default.post(name: .dataMigrationCompleted, object: nil)
         }
     }
     
     // MARK: - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     
     /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
     func retryMigration() {
         MigrationStateManager.shared.resetMigrationState()
         premiumStatusChanged()
     }
     
     /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
     func getMigrationInfo() -> (needsAttention: Bool, message: String) {
         let (state, premiumStatus) = MigrationStateManager.shared.getLastMigrationState()
         
         switch state {
         case .failedICloudUnavailable:
             return (true, "iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ iCloud Drive –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Premium —Ñ—É–Ω–∫—Ü–∏–π.")
         case .failedError:
             return (true, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
         case .inProgress:
             return (true, "–ò–¥–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö...")
         default:
             return (false, "")
         }
     }
 }
 ## **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π:**
 - `completed` - –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, **–Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è**
 - `failedICloudUnavailable` - –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ iCloud, **–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ iCloud —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω**
 - `failedError` - –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏, **–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞**

 ## **–õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤:**
 1. **Premium ‚Üí Premium** (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) - –º–∏–≥—Ä–∞—Ü–∏—è **–ù–ï –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è**
 2. **iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω** - –º–∏–≥—Ä–∞—Ü–∏—è **–ù–ï –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è iCloud**  
 3. **–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã** - –º–∏–≥—Ä–∞—Ü–∏—è **–ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è** –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
 4. **–£—Å–ø–µ—à–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è** - **–ù–ï –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è** –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è

 ## **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
 ```swift
 // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 let (needsAttention, message) = AppFileManager.shared.getMigrationInfo()
 if needsAttention {
     showAlert(message: message)
 }

 // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
 AppFileManager.shared.retryMigration()
 ```

 **–ò—Ç–æ–≥:** –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø—ã—Ç–∞—Ç—å—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∫–ª—é—á–∏—Ç—å iCloud Drive –∏ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –≤—Ä—É—á–Ω—É—é.
 
 
 iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–∏–≥—Ä–∞—Ü–∏—è –ù–ï –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è iCloud
 –∞ –∫–∞–∫ –º—ã —É–∑–Ω–∞–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è icloud –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?
 
 
 –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã **–ù–ï** –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ iCloud –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:
 import Foundation
 import Network
 import UIKit

 // MARK: - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ iCloud –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
 class iCloudMonitor {
     static let shared = iCloudMonitor()
     
     private var networkMonitor: NWPathMonitor?
     private var monitorQueue = DispatchQueue(label: "iCloudMonitor")
     
     // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     static let iCloudBecameAvailable = NSNotification.Name("iCloudBecameAvailable")
     static let internetConnectionRestored = NSNotification.Name("internetConnectionRestored")
     
     private init() {
         startMonitoring()
     }
     
     // MARK: - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     private func startMonitoring() {
         // 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
         startNetworkMonitoring()
         
         // 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç iCloud)
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(appDidBecomeActive),
             name: UIApplication.didBecomeActiveNotification,
             object: nil
         )
         
         // 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud —á–µ—Ä–µ–∑ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
         startFileSystemMonitoring()
     }
     
     // MARK: - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
     private func startNetworkMonitoring() {
         networkMonitor = NWPathMonitor()
         
         networkMonitor?.pathUpdateHandler = { [weak self] path in
             if path.status == .satisfied {
                 print("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                 self?.checkiCloudAfterNetworkRestore()
             } else {
                 print("üö´ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ")
             }
         }
         
         networkMonitor?.start(queue: monitorQueue)
     }
     
     // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ iCloud –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
     private func checkiCloudAfterNetworkRestore() {
         // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã iCloud —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
         DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
             if PremiumManager.shared.isICloudAvailable() {
                 print("‚òÅÔ∏è iCloud —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
                 NotificationCenter.default.post(name: Self.iCloudBecameAvailable, object: nil)
             }
         }
     }
     
     // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     @objc private func appDidBecomeActive() {
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º iCloud –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
         // (–≤–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏–ª iCloud –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
         checkiCloudAvailability()
     }
     
     // MARK: - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã iCloud
     private func startFileSystemMonitoring() {
         // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
         Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { [weak self] _ in
             self?.checkiCloudAvailability()
         }
     }
     
     // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud
     private func checkiCloudAvailability() {
         let wasUnavailable = !PremiumManager.shared.isICloudAvailable()
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
         let isNowAvailable = checkiCloudStatus()
         
         // –ï—Å–ª–∏ iCloud —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω
         if wasUnavailable && isNowAvailable {
             print("‚òÅÔ∏è iCloud —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω!")
             NotificationCenter.default.post(name: Self.iCloudBecameAvailable, object: nil)
         }
     }
     
     // MARK: - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ iCloud
     private func checkiCloudStatus() -> Bool {
         // 1. –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
         guard let _ = FileManager.default.url(forUbiquityContainerIdentifier: nil) else {
             return false
         }
         
         // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ iCloud
         if #available(iOS 9.0, *) {
             let status = FileManager.default.ubiquityIdentityToken
             return status != nil
         }
         
         return true
     }
     
     // MARK: - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
     func forceCheckiCloudAvailability() {
         checkiCloudAvailability()
     }
     
     deinit {
         networkMonitor?.cancel()
         NotificationCenter.default.removeObserver(self)
     }
 }

 // MARK: - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π MigrationStateManager
 extension MigrationStateManager {
     
     /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ iCloud –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
     func setupiCloudMonitoring() {
         // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ iCloud
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(iCloudBecameAvailable),
             name: iCloudMonitor.iCloudBecameAvailable,
             object: nil
         )
     }
     
     @objc private func iCloudBecameAvailable() {
         print("‚òÅÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud")
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud
         let (lastState, _) = getLastMigrationState()
         
         if lastState == .failedICloudUnavailable {
             print("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è iCloud")
             
             // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
             DispatchQueue.main.async {
                 NotificationCenter.default.post(name: .premiumStatusChanged, object: nil)
             }
         }
     }
 }

 // MARK: - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π AppFileManager
 extension AppFileManager {
     
     /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≤—ã–∑–≤–∞—Ç—å –≤ init)
     func setupiCloudMonitoring() {
         MigrationStateManager.shared.setupiCloudMonitoring()
         
         // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è
         NotificationCenter.default.addObserver(
             self,
             selector: #selector(handleiCloudAvailable),
             name: iCloudMonitor.iCloudBecameAvailable,
             object: nil
         )
     }
     
     @objc private func handleiCloudAvailable() {
         print("üì± AppFileManager: iCloud —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω")
         
         // –ú–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å UI –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
         DispatchQueue.main.async {
             NotificationCenter.default.post(
                 name: NSNotification.Name("iCloudStatusChanged"), 
                 object: nil,
                 userInfo: ["available": true]
             )
         }
     }
 }

 // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è ViewController
 extension MainViewController {
     
     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è iCloud
     @objc private func iCloudBecameAvailable() {
         print("üéâ iCloud –¥–æ—Å—Ç—É–ø–µ–Ω! –û–±–Ω–æ–≤–ª—è–µ–º UI")
         
         DispatchQueue.main.async { [weak self] in
             // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ iCloud
             self?.hideNoiCloudWarning()
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
             self?.showAlert(
                 title: "iCloud –¥–æ—Å—Ç—É–ø–µ–Ω!", 
                 message: "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Premium —Ñ—É–Ω–∫—Ü–∏–∏. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã."
             )
             
             // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
             self?.updatePremiumUI()
         }
     }
     
     // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å iCloud" –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
     private func showManualCheckButton() {
         let checkButton = UIButton(type: .system)
         checkButton.setTitle("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å iCloud", for: .normal)
         checkButton.addTarget(self, action: #selector(manuallyCheckiCloud), for: .touchUpInside)
         // –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω
     }
     
     @objc private func manuallyCheckiCloud() {
         iCloudMonitor.shared.forceCheckiCloudAvailability()
         
         // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
         showAlert(title: "–ü—Ä–æ–≤–µ—Ä—è–µ–º...", message: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å iCloud")
     }
     
     private func hideNoiCloudWarning() {
         // –°–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è UI
     }
     
     private func updatePremiumUI() {
         // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Premium —Ñ—É–Ω–∫—Ü–∏–π
     }
 }

 // MARK: - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ SceneDelegate
 /*
 func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
     // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
     
     // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ iCloud
     _ = iCloudMonitor.shared
     AppFileManager.shared.setupiCloudMonitoring()
 }
 */
 
 –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ iCloud —Ç—Ä–µ–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:

 ## **1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è** üåê
 ```swift
 // –ß–µ—Ä–µ–∑ NWPathMonitor - –∫–æ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
 // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç iCloud (–≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é)
 ```

 ## **2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** üì±  
 ```swift
 // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 // (–≤–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏–ª iCloud –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
 UIApplication.didBecomeActiveNotification
 ```

 ## **3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞** ‚è∞
 ```swift
 // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å iCloud
 Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true)
 ```

 ## **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

 1. **iCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω** ‚Üí –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ `failedICloudUnavailable`
 2. **–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞** –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ iCloud  
 3. **iCloud –ø–æ—è–≤–∏–ª—Å—è** ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è `premiumStatusChanged`
 4. **–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

 ## **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**

 ```swift
 // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å iCloud" –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 @objc private func manuallyCheckiCloud() {
     iCloudMonitor.shared.forceCheckiCloudAvailability()
 }

 // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ UI
 let (needsAttention, message) = AppFileManager.shared.getMigrationInfo()
 if needsAttention {
     showAlert(message: message + "\n\n–ë—É–¥–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.")
 }
 ```

 **–ò—Ç–æ–≥:** –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å **—Å–∞–º–∞** –Ω–∞–π–¥–µ—Ç –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ iCloud —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–µ–∑ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
 */
