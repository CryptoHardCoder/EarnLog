//
//  ArchiveManager.swift
//  JobData
//
//  Created by M3 pro on 26/07/2025.
//
import UIKit
import PDFKit

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ AppFileManager –¥–ª—è CSV –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
class ArchiveManager: MemoryTrackable {
    
    private let fileManager = FileManager.default
    
    // MARK: - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
    private lazy var csvArchivesFolderURL = appPaths.operationFolder(for: .archive)
    
    private lazy var forRecoveryArchivesFolderURL = appPaths.backupFolder(for: .archive)
    
    private lazy var lastKnownDateFileURL = 
        appPaths.myApplicationSupportFilesFolderURL.appending(path: lastKnownDateFileName)
    
    private lazy var archiveMetadataFileURL = 
        appPaths.myApplicationSupportFilesFolderURL.appending(path: archiveMetadataFileName)
    
    
    private var allItems: [IncomeEntry] {
        dataProvider.getAllItems()
    }
        
    private var lastKnownDateFileName = "Last Known Date.json"
    
    private var archiveMetadataFileName = "Archive Metadata.json"
    
    private let dataProvider: DataProvider
    private let appPaths: AppPaths
    private let dataService: UniversalDataService
    
    init(fileManager: DataProvider, appPaths: AppPaths, dataService: UniversalDataService) {
        self.dataProvider = fileManager
        self.appPaths = appPaths
        self.dataService = dataService
        trackCreation()
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è CSV –∞—Ä—Ö–∏–≤–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    private func ensureCSVArchivesFolderExists(existURL: URL ) {
        
        if !fileManager.fileExists(atPath: existURL.path) {
            do {
                try fileManager.createDirectory(at: existURL, withIntermediateDirectories: true)
                print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è CSV –∞—Ä—Ö–∏–≤–æ–≤: \(csvArchivesFolderURL.path)")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤: \(error)")
            }
        }
    }
    
     func getExistingArchiveFiles() -> [String] {
         ensureCSVArchivesFolderExists(existURL: csvArchivesFolderURL)
         
         let metadata = loadArchiveMetadata()
         let filesFromMetadata: [String] = metadata.map { $0.fileName }
         var fileNamesToReturn = [String]()
         
         do {
             let filesInDirectory = try fileManager.contentsOfDirectory(atPath: csvArchivesFolderURL.path)
             
             for fileName in filesFromMetadata {
                 if filesInDirectory.contains(fileName) {
                     fileNamesToReturn.append(fileName)
                 } else {
                     print("‚ö†Ô∏è –§–∞–π–ª –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ: \(fileName)")
                 }
             }
             
             let extraFiles = Set(filesInDirectory).subtracting(Set(filesFromMetadata))
             if !extraFiles.isEmpty {
                 print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: \(extraFiles)")
             }
             
         } catch {
             print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤: \(error)")
         }
         
         return fileNamesToReturn
     }

     func cleanupArchiveInconsistencies() {
         let metadata = loadArchiveMetadata()
         var validMetadata = [ArchiveMetadata]()
         
         do {
             let filesInDirectory = try fileManager.contentsOfDirectory(atPath: csvArchivesFolderURL.path)
             
             for meta in metadata {
                 if filesInDirectory.contains(meta.fileName) {
                     validMetadata.append(meta)
                 } else {
                     print("üßπ –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: \(meta.fileName)")
                 }
             }
             
             // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
             if validMetadata.count != metadata.count {
                 let data = try JSONEncoder().encode(validMetadata)
                 try data.write(to: archiveMetadataFileURL)
                 print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
             }
             
         } catch {
             print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–µ–π: \(error)")
         }
     }

    private func saveLastKnownDate(_ date: Date) {
        let calendar = Calendar.current
        let dateComponents = DateComponents(
            year: calendar.component(.year, from: date),
            month: calendar.component(.month, from: date),
            day: calendar.component(.day, from: date)
        )

        // –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        let folderURL = appPaths.myApplicationSupportFilesFolderURL
        if !fileManager.fileExists(atPath: folderURL.path) {
            do {
                try fileManager.createDirectory(at: folderURL, withIntermediateDirectories: true)
                print("üìÅ –ü–∞–ø–∫–∞ Application Support —Å–æ–∑–¥–∞–Ω–∞: \(folderURL.path)")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ Application Support: \(error)")
            }
        }

        var isDirectory: ObjCBool = false
        if fileManager.fileExists(atPath: lastKnownDateFileURL.path, isDirectory: &isDirectory) {
            if isDirectory.boolValue {
                // –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - —É–¥–∞–ª—è–µ–º –µ—ë
                do {
                    try fileManager.removeItem(at: lastKnownDateFileURL)
                    print("üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞")
                } catch {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: \(error)")
                    return
                }
            }
            // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        do {
            let data = try JSONEncoder().encode(dateComponents)
            try data.write(to: lastKnownDateFileURL)
            
            if !fileManager.fileExists(atPath: lastKnownDateFileURL.path) {
                print("‚úÖ –§–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω")
            }
            // –£–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã: \(error)")
        }
    }
    
    private func loadLastKnownDate() -> DateComponents? {
        do {
            let data = try Data(contentsOf: lastKnownDateFileURL)
            return try JSONDecoder().decode(DateComponents.self, from: data)
        } catch {
            return nil
        }
    }
    
    // MARK: - –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    func checkArchiveOnAppStart() {
        let calendar = Calendar.current
        let today = Date()
        let todayComponents = calendar.dateComponents([.year, .month, .day], from: today)
        
        guard let lastKnownComponents = loadLastKnownDate() else {
//            print("üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            saveLastKnownDate(today)
            return
        }
        
//        print("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: \(lastKnownComponents.month ?? 0).\(lastKnownComponents.year ?? 0)")
//        print("üìÖ –°–µ–≥–æ–¥–Ω—è: \(todayComponents.month ?? 0).\(todayComponents.year ?? 0)")
        
        let isNewMonth = (todayComponents.year != lastKnownComponents.year) ||
                        (todayComponents.month != lastKnownComponents.month)
        
        if isNewMonth && allItems.isEmpty {
            
            archiveCurrentDataToCSV(
                for: lastKnownComponents.year ?? 0,
                month: lastKnownComponents.month ?? 0
            )
        } else if isNewMonth {
//            print("üóìÔ∏è –ù–æ–≤—ã–π –º–µ—Å—è—Ü, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
        } else {
//            print("üìÖ –¢–æ—Ç –∂–µ –º–µ—Å—è—Ü - –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        }
        
        saveLastKnownDate(today)
    }
    
    
    // –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    func archiveData<T: Exportable>(_ items: [T], format: FileFormat, period: TimeFilter) -> URL? {
        let config = FileProcessingConfiguration.defaultArchive
        let context = DataProcessingContext(items: items, configuration: config, period: period)
        
        let result = dataService.processData(context: context, to: format)
        
        switch result {
        case .success(let url):
            print("‚úÖ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: \(url)")
            return url
        case .failure(let error):
            print("‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: \(error.localizedDescription)")
            return nil
        }
    }
    
    // MARK: - –ü—Ä–æ—Ü–µ—Å—Å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ CSV
    // TODO: - –°–¥–µ–ª–∞—Ç—å —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–æ–º –≤—ã–±—Ä–∞–ª—Å—è —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    /// –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    func archiveCurrentDataToCSV(for year: Int, month: Int) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.global(qos: .utility).async { [weak self] in
            guard let self = self else { return }
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
            let itemsToArchive = allItems.filter { item in
                let calendar = Calendar.current
                let itemMonth = calendar.component(.month, from: item.date)
                let itemYear = calendar.component(.year, from: item.date)
                return month == itemMonth && year == itemYear
            }
            
            guard !itemsToArchive.isEmpty else {
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞ \(month)/\(year)")
                return
            }
            
            let itemsCount = itemsToArchive.count
            print("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º \(itemsCount) –∑–∞–ø–∏—Å–µ–π –∑–∞ \(month)/\(year)...")
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            let config = FileProcessingConfiguration.defaultArchive
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            let calendar = Calendar.current
            var startComponents = DateComponents()
            startComponents.year = year
            startComponents.month = month
            startComponents.day = 1
            
            var endComponents = DateComponents()
            endComponents.year = year
            endComponents.month = month
            endComponents.day = calendar.range(of: .day, in: .month, for: calendar.date(from: startComponents) ?? Date())?.upperBound ?? 31
            
            guard let _ = calendar.date(from: startComponents),
                  let _ = calendar.date(from: endComponents) else {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
                return
            }
            
            let timeFilter = TimeFilter.month
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            let context = DataProcessingContext(
                items: itemsToArchive,
                configuration: config,
                period: timeFilter
            )
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            let result = self.dataService.processData(context: context, to: .csv)
            
            switch result {
            case .success(let fileURL):
                print("‚úÖ CSV –∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: \(fileURL.path)")
                
                // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞
                let fileName = fileURL.lastPathComponent
                let metadata = ArchiveMetadata(
                    year: year,
                    month: month,
                    itemsCount: itemsCount,
                    fileName: fileName,
                    createdAt: Date()
                )
                self.saveArchiveMetadata(metadata)
//                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
//                DispatchQueue.main.async {
//                    
//                }
                
            case .failure(let error):
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –∞—Ä—Ö–∏–≤–∞: \(error.localizedDescription)")
                    // TODO: –°–¥–µ–ª–∞—Ç—å –≤—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –≤—Ä—É—á–Ω—É—é
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
                }
            }
        }
    }
    
//    // MARK: - –ü—Ä–æ—Ü–µ—Å—Å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ CSV
//    
//    /// –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
//    func archiveCurrentDataToCSV(for year: Int, month: Int) {
////        let userFormat = UserDefaults.standard.string(forKey: userFormatKey) ?? FileFormat.pdf.rawValue
////        
////        let format = FileFormat(rawValue: userFormat)
//        
//        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
//        DispatchQueue.global(qos: .utility).async { [weak self] in
//            guard let self = self else { return }
//            
////            print("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –∑–∞ \(month)/\(year)")
//        
//        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//        self.ensureCSVArchivesFolderExists(existURL: csvArchivesFolderURL)
//        self.ensureCSVArchivesFolderExists(existURL: forRecoveryArchivesFolderURL)
//        
//        let fileName = "archive_\(month)_\(year).csv"
//        let fileURL = self.csvArchivesFolderURL.appendingPathComponent(fileName)
//        let fileForRecoveryURL = self.forRecoveryArchivesFolderURL.appendingPathComponent(fileName)
//        
//        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
//            let itemsToArchive = AppFileManager.shared.allItems.filter { item in
//            let calendar = Calendar.current
//            let itemMonth = calendar.component(.month, from: item.date)
//            let itemYear  = calendar.component(.year, from: item.date)
//            return month == itemMonth && year == itemYear
//        }
//        let itemsCount = itemsToArchive.count
//        
////        print("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º \(itemsCount) –∑–∞–ø–∏—Å–µ–π...")
//            let titleForFile = "\("title_for_archive_file".localized ) \(month).\(year)"
//        // –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–æ–Ω–µ
//            let csvContent = createCSVContent(from: itemsToArchive, title: titleForFile, )
//        
//        do {
//            // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Ñ–∞–π–ª
//            try csvContent.write(to: fileURL, atomically: true, encoding: .utf8)
//            try fileManager.copyItem(at: fileURL, to: fileForRecoveryURL)
////            print("üíæ CSV –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ–Ω–µ: \(csvFileName)")
//            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞
//           let metadata = ArchiveMetadata(
//                year: year,
//                month: month,
//                itemsCount: itemsCount,
//                csvFileName: fileName,
//                createdAt: Date()
//            )
//            self.saveArchiveMetadata(metadata)
//            
//        } catch {
//            //TODO: –°–¥–µ–ª–∞—Ç—å –≤—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –≤—Ä—É—á–Ω—É—é 
//            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
//            DispatchQueue.main.async {
//                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –∞—Ä—Ö–∏–≤–∞: \(error)")
//                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
//                }
//            }
//        }
//    }
    
    
    // MARK: - –†–∞–±–æ—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä—Ö–∏–≤–æ–≤
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞
    private func saveArchiveMetadata(_ metadata: ArchiveMetadata) {
        var allMetadata = loadArchiveMetadata()
        print(allMetadata)
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –∂–µ –º–µ—Å—è—Ü/–≥–æ–¥
        allMetadata.removeAll { existingMetadata in
            existingMetadata.year == metadata.year && existingMetadata.month == metadata.month
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        allMetadata.append(metadata)
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        allMetadata.sort { first, second in
            if first.year != second.year {
                return first.year > second.year
            }
            return first.month > second.month
        }
        
        do {
            let data = try JSONEncoder().encode(allMetadata)
            try data.write(to: archiveMetadataFileURL)
//            print("üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
    }
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ CSV —Ñ–∞–π–ª–∞
    func loadItemsFromCSV(fileName: String) -> [IncomeEntry] {
        let csvFileURL = csvArchivesFolderURL.appendingPathComponent(fileName)
//        print(csvFileURL)
        
        do {
            let csvContent = try String(contentsOf: csvFileURL, encoding: .utf8)
//            print(csvContent)
            return parseCSVToItems(csvContent)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞ \(fileName): \(error)")
            return []
        }
    }
    
    //TODO: - –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ª–∏–Ω–∏–π, —Å–µ–π—á–∞—Å –∫–æ–Ω–µ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –ø–∏—à–µ—Ç—Å—è –∏—Ç–æ–≥–∏ –ø–æ –Ω—É–ª—è–º –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç—Å—è. –ù–∞–¥–æ —á—Ç–æ–±—ã —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
    /// –ü–∞—Ä—Å–∏—Ç CSV –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
    private func parseCSVToItems(_ csvContent: String) -> [IncomeEntry] {
        let lines = csvContent.components(separatedBy: .newlines)
//        print(lines)
        var items: [IncomeEntry] = []
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        for line in lines.dropFirst() {
//            print("line: \(line)")
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            guard !line.trimmingCharacters(in: .whitespaces).isEmpty else { continue }
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ)
            var fields = parseCSVLine(line)
            print(fields)
            fields.removeAll { $0 == "" }
            print(fields)
//            print(type(of: fields))
            if !fields.isEmpty && fields[0] == "‚Ññ"{
//               print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞: \(fields[0])")
               continue
            }
            if fields[0] == "total_count".localized ||
               fields[0] == "total_volume".localized ||
               fields[0] == "paid_volume".localized ||
               fields[0] == "unPaid_volume".localized{
               print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞: \(fields[0])")
               continue
            }
            // –ò–∑–º–µ–Ω–µ–Ω–æ —Å >= 6 –Ω–∞ >= 5, —Ç–∞–∫ –∫–∞–∫ –≤ CSV 5 –ø–æ–ª–µ–π: –î–∞—Ç–∞,–ú–∞—Ä–∫–∞,–¶–µ–Ω–∞,–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã,–ú–µ—Å—Ç–æ
            guard fields.count >= 6 else { 
                print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–µ: \(fields.count), –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 6")
                continue 
            }
            
//            print("fields: \(fields)")
            
            // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è: –î–∞—Ç–∞,–ú–∞—Ä–∫–∞,–¶–µ–Ω–∞,–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã,–ú–µ—Å—Ç–æ
            let dateString = fields[1].trimmingCharacters(in: .whitespaces)
//            print("dateString: \(dateString)")
            
            let make = fields[2].trimmingCharacters(in: .whitespaces)
//            print("make: \(make)")
            
            let priceString = fields[3].trimmingCharacters(in: .whitespaces)
            let price = Double(priceString) ?? 0.0
//            print("price: \(price)")
            
            let statusPaid = fields[4].trimmingCharacters(in: .whitespaces)
//            print("statusPaid: \(statusPaid)")
            
            let statusPaidBool: Bool
            if statusPaid == "paid_for_cell".localized {
                statusPaidBool = true
            } else {
                statusPaidBool = false
            }
//            print("statusPaidBool: \(statusPaidBool)")
            
            let incomeSource: IncomeSource
            if fields.indices.contains(5) {
                let sourceString = fields[5].trimmingCharacters(in: .whitespaces)
                incomeSource = IncomeSource.fromDisplayName(sourceString)
            } else {
                incomeSource = IncomeSource.mainJob
            }
//            print("incomeSource: \(incomeSource)")
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "dd.MM.yyyy"
            dateFormatter.locale = Locale(identifier: "en_US_POSIX") // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            
            let date = dateFormatter.date(from: dateString) ?? Date()
//            print("parsed date: \(date)")
            
            let item = IncomeEntry(
                date: date,
                car: make,
                price: price,
                isPaid: statusPaidBool,
                source: incomeSource
            )
            
            items.append(item)
//            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: \(item)")
        }
        
//        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(items.count) —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV")
        return items
    }
    
    /// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É CSV —Å —É—á–µ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    private func parseCSVLine(_ line: String) -> [String] {
        var fields: [String] = []
        var currentField = ""
        var inQuotes = false
        var i = line.startIndex
        
        while i < line.endIndex {
            let char = line[i]
            
            if char == "\"" {
                if inQuotes && i < line.index(before: line.endIndex) && line[line.index(after: i)] == "\"" {
                    // –î–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è
                    currentField += "\""
                    i = line.index(after: i) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞–≤—ã—á–∫—É
                } else {
                    // –ù–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
                    inQuotes.toggle()
                }
            } else if char == "," && !inQuotes {
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–ª—è
                fields.append(currentField)
                currentField = ""
            } else {
                currentField += String(char)
            }
            
            i = line.index(after: i)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
        fields.append(currentField)
        
        return fields
    }
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–æ–≤
    func loadArchiveMetadata() -> [ArchiveMetadata] {
        do {
            let data = try Data(contentsOf: archiveMetadataFileURL)
            return try JSONDecoder().decode([ArchiveMetadata].self, from: data)
        } catch {
            print("üìÇ –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
            ensureCSVArchivesFolderExists(existURL: archiveMetadataFileURL)
            return []
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
    func getAvailableMonths() -> [(year: Int, month: Int, displayName: String)] {
        var months: [(year: Int, month: Int, displayName: String)] = []
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if !allItems.isEmpty {
            let calendar = Calendar.current
            let now = Date()
            let currentMonth = calendar.component(.month, from: now)
            let currentYear = calendar.component(.year, from: now)
            
            let dateFormatter = DateFormatter()
            dateFormatter.locale = Locale(identifier: "ru_RU")
            dateFormatter.dateFormat = "MMMM yyyy"
            let displayName = dateFormatter.string(from: now)
            
            months.append((currentYear, currentMonth, displayName))
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        let metadata = loadArchiveMetadata()
        for archiveMetadata in metadata {
            months.append(
                (
                    archiveMetadata.year, 
                    archiveMetadata.month, 
                    archiveMetadata.monthDisplayName(Locale(identifier: "locale".localized))
                )
            )
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        let uniqueKeys = Set(months.map { "\($0.year)-\($0.month)" })
        let uniqueMonths = uniqueKeys.compactMap { key -> (year: Int, month: Int, displayName: String)? in
            return months.first { "\($0.year)-\($0.month)" == key }
        }
        
        let sortedMonths = uniqueMonths.sorted { first, second in
            if first.year != second.year {
                return first.year > second.year
            }
            return first.month > second.month
        }
        
//        print("üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(sortedMonths.count)")
        return sortedMonths
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ö–∏–≤–∞—Ö
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö CSV –∞—Ä—Ö–∏–≤–∞—Ö
    func getArchiveInfo() -> [(displayName: String, itemsCount: Int, filePath: String, createdAt: Date)] {
        let metadata = loadArchiveMetadata()
        
        return metadata.map { meta in
            let filePath = csvArchivesFolderURL.appendingPathComponent(meta.fileName).path
            return (meta.monthDisplayName(Locale(identifier: "locale".localized)), meta.itemsCount, filePath, meta.createdAt)
        }
    }
    
    deinit {
        trackDeallocation() // –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ memory leaks
    }
}

// MARK: - PDF Archive Functions
extension ArchiveManager {
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF –∞—Ä—Ö–∏–≤–∞
    func loadItemsFromPDF(fileName: String) -> [IncomeEntry] {
        let pdfFileURL = csvArchivesFolderURL.appendingPathComponent(fileName)
        
        guard let pdfDocument = PDFDocument(url: pdfFileURL) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF —Ñ–∞–π–ª: \(fileName)")
            return []
        }
        
        return parsePDFToItems(pdfDocument)
    }
    
    /// –ü–∞—Ä—Å–∏—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤ IncomeEntry
    private func parsePDFToItems(_ pdfDocument: PDFDocument) -> [IncomeEntry] {
        var items: [IncomeEntry] = []
        let pageCount = pdfDocument.pageCount
        
        for pageIndex in 0..<pageCount {
            guard let page = pdfDocument.page(at: pageIndex),
                  let pageText = page.string else { continue }
            
            let pageItems = extractItemsFromPageText(pageText)
            items.append(contentsOf: pageItems)
        }
        
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(items.count) –∑–∞–ø–∏—Å–µ–π –∏–∑ PDF")
        return items.sorted { $0.date > $1.date } // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF
    private func extractItemsFromPageText(_ pageText: String) -> [IncomeEntry] {
        var items: [IncomeEntry] = []
        let lines = pageText.components(separatedBy: .newlines)
        
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Ç–æ–≥–∏ –∏ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
        for line in lines {
            let cleanLine = line.trimmingCharacters(in: .whitespaces)
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            guard !cleanLine.isEmpty,
                  !isServiceLine(cleanLine),
                  let item = parseDataLineFromPDF(cleanLine) else { continue }
            
            items.append(item)
        }
        
        return items
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–ª—É–∂–µ–±–Ω–æ–π (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Ç–æ–≥–∏, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
    private func isServiceLine(_ line: String) -> Bool {
        let servicePrefixes = [
            "iTracker", "Archived Data", "Exported Data", "Page", "Generated:",
            "–ò—Ç–æ–≥–∏:", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", "–û–±—â–∏–π –æ–±—ä–µ–º:", "–û–±—ä–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö:",
            "–û–±—ä–µ–º –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö:", "‚Ññ", "date".localized, "make".localized,
            "price".localized, "status_pay".localized, "source".localized
        ]
        
        return servicePrefixes.contains { line.contains($0) } || 
               line.matches(#"^\d+\s+\d+\s+of\s+\d+$"#) || // "Page X of Y"
               line.matches(#"^Generated:\s+"#)
    }
    
    /// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF –≤ IncomeEntry
    private func parseDataLineFromPDF(_ line: String) -> IncomeEntry? {
        // PDF —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        if let item = parseTableFormatLine(line) {
            return item
        }
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        if let item = parsePatternBasedLine(line) {
            return item
        }
        
        return nil
    }
    
    /// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: ‚Ññ –î–∞—Ç–∞ –ú–∞—Ä–∫–∞ –¶–µ–Ω–∞ –°—Ç–∞—Ç—É—Å –ò—Å—Ç–æ—á–Ω–∏–∫
    private func parseTableFormatLine(_ line: String) -> IncomeEntry? {
        let components = line.components(separatedBy: .whitespaces)
            .filter { !$0.isEmpty }
        
        // –ú–∏–Ω–∏–º—É–º 6 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –Ω–æ–º–µ—Ä, –¥–∞—Ç–∞, –º–∞—Ä–∫–∞, —Ü–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å, –∏—Å—Ç–æ—á–Ω–∏–∫
        guard components.count >= 6 else { return nil }
        
        // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏)
        guard Int(components[0]) != nil else { return nil }
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
        let dateString = components[1]
        guard let date = parseDateFromString(dateString) else { return nil }
        
        // –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        let make = components[2]
        
        guard let price = Double(components[3]) else { return nil }
        
        let statusString = components[4]
        let isPaid = (statusString == "paid_for_cell".localized)
        
        // –ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        let sourceString = components.dropFirst(5).joined(separator: " ")
        let source = IncomeSource.fromDisplayName(sourceString)
        
        return IncomeEntry(
            date: date,
            car: make,
            price: price,
            isPaid: isPaid,
            source: source
        )
    }
    
    /// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    private func parsePatternBasedLine(_ line: String) -> IncomeEntry? {
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy
        let datePattern = #"(\d{2}\.\d{2}\.\d{4})"#
        guard let dateMatch = line.range(of: datePattern, options: .regularExpression) else {
            return nil
        }
        
        let dateString = String(line[dateMatch])
        guard let date = parseDateFromString(dateString) else { return nil }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã (—á–∏—Å–ª–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é)
        let pricePattern = #"(\d+(?:\.\d{2})?)"#
        let priceMatches = line.ranges(of: pricePattern, options: .regularExpression)
        
        // –ò—â–µ–º —Ü–µ–Ω—É (–æ–±—ã—á–Ω–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–æ–µ - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏)
        guard priceMatches.count >= 2 else { return nil }
        let priceRange = priceMatches[1] // –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Ü–µ–Ω—É
        let priceString = String(line[priceRange])
        guard let price = Double(priceString) else { return nil }
        
        // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        let paidStatus = line.contains("paid_for_cell".localized)
        
        // –î–ª—è –º–∞—Ä–∫–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        // –£–¥–∞–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –º–∞—Ä–∫—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
        var remainingLine = line
        remainingLine = remainingLine.replacingOccurrences(of: dateString, with: "")
        remainingLine = remainingLine.replacingOccurrences(of: priceString, with: "")
        remainingLine = remainingLine.replacingOccurrences(of: "paid_for_cell".localized, with: "")
        remainingLine = remainingLine.replacingOccurrences(of: "unPaid_for_cell".localized, with: "")
        
        let remainingComponents = remainingLine.components(separatedBy: .whitespaces)
            .filter { !$0.isEmpty && Int($0) == nil } // –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        guard remainingComponents.count >= 2 else { return nil }
        
        let make = remainingComponents[0]
        let sourceString = remainingComponents.dropFirst().joined(separator: " ")
        let source = IncomeSource.fromDisplayName(sourceString)
        
        return IncomeEntry(
            date: date,
            car: make,
            price: price,
            isPaid: paidStatus,
            source: source
        )
    }
    
    /// –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
    private func parseDateFromString(_ dateString: String) -> Date? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd.MM.yyyy"
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        return dateFormatter.date(from: dateString)
    }
    
    /// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è getItemsForMonth —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PDF
    func getItemsForMonthPDF(year: Int, month: Int) -> [IncomeEntry] {
        let calendar = Calendar.current
        let now = Date()
        let currentMonth = calendar.component(.month, from: now)
        let currentYear = calendar.component(.year, from: now)

        let metadata = loadArchiveMetadata()
        let targetMetadata = metadata.first(where: { $0.year == year && $0.month == month })

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
        let dataFromMemory = allItems.filter {
            calendar.component(.year, from: $0.date) == year &&
            calendar.component(.month, from: $0.date) == month
        }

        var result: [IncomeEntry] = []

        if year == currentYear && month == currentMonth {
            // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            result.append(contentsOf: dataFromMemory)
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∞, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑ PDF
        if let targetMetadata = targetMetadata {
            let fileName = targetMetadata.fileName
            
            if fileName.hasSuffix(".pdf") {
                let dataFromFile = loadItemsFromPDF(fileName: fileName)
                result.append(contentsOf: dataFromFile)
            } else if fileName.hasSuffix(".csv") {
                // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CSV –∞—Ä—Ö–∏–≤–∞–º–∏
                let dataFromFile = loadItemsFromCSV(fileName: fileName)
                result.append(contentsOf: dataFromFile)
            }
        } else {
            print("‚ùå –ê—Ä—Ö–∏–≤ –∑–∞ \(month).\(year) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        let uniqueItems = Array(Set(result))
        return uniqueItems.sorted { $0.date > $1.date }
    }
}

